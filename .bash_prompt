#!/usr/bin/env bash

source ~/.git-prompt.sh

function __git_symbol {
    if [ $(git rev-parse --is-inside-git-dir 2> /dev/null) ]; then
        echo 'î‚ '
    fi
}

function __git_remote {
    # Based on the `git status -sb` command.
    #
    # Example output
    #   ## main...origin/main [ahead 3]
    #   M .bash_prompt

    printf_format="${1}"

    # If the status contains 'ahead' replace it with a '+'.
    ahead="$(git status -sb 2> /dev/null |
        grep '##' 2> /dev/null |
        grep '\[ahead' 2> /dev/null |
        sed 's/.*/+/')"
    # If the status contains 'behind' replace it with a '-'.
    behind="$(git status -sb 2> /dev/null |
        grep '##' 2> /dev/null |
        grep '\[behind' 2> /dev/null |
        sed 's/.*/-/')"
    # Get the branch details on the line that contains '##'
    # It has a remote beind tracked if that line contains '...'
    # Just get the origin name based on the format `*...<remote>/*`
    remote="$(git status -sb 2> /dev/null |
        grep '##' |
        grep '\.\.\.' 2> /dev/null |
        sed 's/.*\.\.\.//' |
        sed 's/\/.*//')"

    if [ ! -z "$remote" ]; then
        printf -- "$printf_format" "$behind" "$remote" "$ahead"
    fi
}

function __git_changes {
    printf_format="${1}"

    untracked="$(git ls-files --others --exclude-standard 2> /dev/null |
        wc -l |
        grep -v '0' 2> /dev/null |
        xargs echo)"
    unstaged="$(git diff --name-only 2> /dev/null |
        wc -l |
        grep -v '0' 2> /dev/null |
        xargs echo)"
    staged="$(git diff --name-only --cached 2> /dev/null |
        wc -l |
        grep -v '0' 2> /dev/null |
        xargs echo)"

    printf -- "$printf_format" "$untracked" "$unstaged" "$staged"
}

function set_ps1 {
    local r="\[\e[0m\]"
    local bold="\[\e[1m\]"
    local dim="\[\e[2m\]"
    local underline="\[\e[4m\]"

    local black="\[\e[30m\]"
    local red="\[\e[31m\]"
    local green="\[\e[32m\]"
    local yellow="\[\e[33m\]"
    local blue="\[\e[34m\]"
    local magenta="\[\e[35m\]"
    local cyan="\[\e[36m\]"
    local light_grey="\[\e[37m\]"
    local dark_grey="\[\e[90m\]"
    local light_red="\[\e[91m\]"
    local light_green="\[\e[92m\]"
    local light_yellow="\[\e[93m\]"
    local light_blue="\[\e[94m\]"
    local light_magenta="\[\e[95m\]"
    local light_cyan="\[\e[96m\]"
    local white="\[\e[97m\]"

    PS1="${blue}\\w"

    PS1+=" ${dark_grey}\$(__git_symbol)"
    PS1+="\$(__git_remote ' ${dark_grey}[$yellow%s${dark_grey}%s$yellow%s${dark_grey}]$r')"
    PS1+="\$(__git_branch ' $dark_grey[$magenta%s$dark_grey]$r')"
    PS1+="\$(__git_changes ' ${dark_grey}[$red%s$dark_grey|$yellow%s$dark_grey|$green%s${dark_grey}]$r')"

    if is_linux; then
        PS1+="\n"
    elif is_msys; then
        PS1+="\012"
    fi
    PS1+="${dark_grey}$ ${r}"
}

set_ps1
